type Query {
  gameTypes: [GameType]
  gameType(name: String!): GameType
}

# An input type for performing a query on a collection of games.
input GameInput {
  # The maximum number of results to return.
  limit: Int

  # Return games with this victor. Accepts "null" for draws.
  victor: String

  # Return games in this contest.
  contest: String

  # Return games played by any of these bots (specified by their IDs.)
  anyPlayers: [String]

  # Return games played by these bots (specified by their IDs.)
  players: [String]
}

# The type of the game.
type GameType {
  # The name of the game. Lower-case.
  name: String!

  # A list of played games.
  games(filters: GameInput): [Game]

  # A list of the bots registered for this game.
  bots(owner: String): [Bot]

  contest(name: String!): Contest

  contests: [Contest]
}

type Bot {
  # The name of the bot.
  id: String!

  # The game type that this bot is registered for.
  gameType: GameType!

  # The creator of the bot. Defaults to "Anonymous".
  owner: String!

  dateRegistered: String
}

type Contest {
  # The name of the contest.
  name: String!

  # The game type of the contest.
  gameType: GameType!

  games(filters: GameInput): [Game]

  # The ranking of the bots in this contest. Accepts an argument
  # for how to score the bots.
  rankings(
    # The way to rank the scores. 
    # The default method "ambitious" assigns 3 points for a win and 1 for a 
    # draw, which favours bots which prioritise winning.
    # The method "punitive" assigns 3 points for a win and 2 for a draw,
    # which favours bots which prioritise avoiding losing.
    # The method "balanced" assigns 2 points for a win and 1 for a draw,
    # which favours winning and avoiding losing equally.
    method: String
  ): [ContestRanking]
}

type ContestRanking {
  bot: Bot!
  wins: Int!
  draws: Int!
  losses: Int!

  # The number of games played.
  played: Int!

  # The score in the current ranking method.
  score: Int!
}

union Game = NoughtsAndCrosses

# A played game of Noughts and Crosses.
type NoughtsAndCrosses {
  id: String!
  gameType: GameType!
  players: [Bot]!
  victor: Bot

  # The contest that this game was played in, if any.
  contest: String

  # The reason that the game ended.
  reason: String!

  # The final layout of the board. The outer array is an array of 
  # rows, the inner array is an array of columns.
  board: [[String]]!

  # The time that the game started.
  startTime: String!

  # Which bot played X and which bot played O.
  marks: NoughtsAndCrossesMarks!

  # The list of turns.
  turns: [NoughtsAndCrossesTurn]!
}

type NoughtsAndCrossesMarks {
  # This bot played "X"s.
  X: Bot!

  # This bot played "O"s.
  O: Bot!
}

type NoughtsAndCrossesTurn {
  # The position of the move, in the form [<row>, <col>],
  # where 0 <= <row>, <col> <= 2.
  space: [Int]!

  # The mark played (X or O).
  mark: String!

  # The time that the move was played.
  time: String!

  # The bot that made the move.
  player: Bot!
}