import { parseHexBoard, renderHexBoard } from './utils';

import { BUMBLEBOTS_SPACE_CLAIMED_0, BUMBLEBOTS_SPACE_CLAIMED_1 } from './const';

describe('Bumblebots utils', () => {
  describe('parsing', () => {
    beforeAll(() => {
      // Sanity check.
      expect(BUMBLEBOTS_SPACE_CLAIMED_0).toEqual(5)
      expect(BUMBLEBOTS_SPACE_CLAIMED_1).toEqual(6)
    });

    it('parses string-boards to int-boards', () => {
      const parsedBoard = parseHexBoard(`
               # # # # # # # #
              # . . + + + . . #
             # . . . . . . . . #
            # . . # # . # # . . #
           # . . # £ . . . # . . #
          # . . . . . . . . . . . #
         # . . # . . . . . . # . . #
        # . . # . . . . . . . # £ . #
         # . . # . . . . . . # . . #
          # . . . . . . . . . . . #
           # . . # . . . . # . . #
            # £ . # # . # # . . #
             # . . . . . . . . #
              # . . x x x . . #
               # # # # # # # #
      `);

      expect(parsedBoard).toEqual([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 5, 5, 5, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1],
        [ , 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
        [ ,  , 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [ ,  ,  , 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
        [ ,  ,  ,  , 1, 2, 0, 1, 1, 0, 1, 1, 0, 0, 1],
        [ ,  ,  ,  ,  , 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [ ,  ,  ,  ,  ,  , 1, 0, 0, 6, 6, 6, 0, 0, 1],
        [ ,  ,  ,  ,  ,  ,  , 1, 1, 1, 1, 1, 1, 1, 1],
      ]);
    });

    it('renders int-boards as strings', () => {
      const renderedBoard = renderHexBoard([
        [1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 5, 5, 5, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1],
        [1, 0, 0, 1, 2, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
        [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1],
        [ , 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1],
        [ ,  , 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [ ,  ,  , 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
        [ ,  ,  ,  , 1, 2, 0, 1, 1, 0, 1, 1, 0, 0, 1],
        [ ,  ,  ,  ,  , 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [ ,  ,  ,  ,  ,  , 1, 0, 0, 6, 6, 6, 0, 0, 1],
        [ ,  ,  ,  ,  ,  ,  , 1, 1, 1, 1, 1, 1, 1, 1],
      ]);
      const stringBoard = (
`
       # # # # # # # #
      # . . + + + . . #
     # . . . . . . . . #
    # . . # # . # # . . #
   # . . # £ . . . # . . #
  # . . . . . . . . . . . #
 # . . # . . . . . . # . . #
# . . # . . . . . . . # £ . #
 # . . # . . . . . . # . . #
  # . . . . . . . . . . . #
   # . . # . . . . # . . #
    # £ . # # . # # . . #
     # . . . . . . . . #
      # . . x x x . . #
       # # # # # # # #
`
      );
      expect(renderedBoard).toEqual(stringBoard);
    });
  });
});
